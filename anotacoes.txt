****** MACETES *****
'as user' -> cria uma variavel chamada user
'else loadinguser2' -> cria uma variavel chamada loadinguser2
<div *ngIf="user$ | async as user; else loadinguser2">

se a varivel loadinguser2 existir, ele carrega o ng-template
<ng-template #loadinguser2>
  <mat-progress-bar></mat-progress-bar>
</ng-template>

'?' -> verifica se e nulo
<p>Name: {{user?.name}}</p>

--formata moeda
{{p.price | currency: 'R$'}}


// quanto for retornar algo diferente de json e preciso informar
return this.http.get(`${this.url}/products/name/${id}`, 
      {responseType: 'text'});
	  
	  
// cria uma copia de um objeto
let newProduct: Product = {...p}
// dessa forma ele faz a copia e altera um dado
let newProduct: Product = {...p, _id: 10}

********************



-- Criar projeto
ng new <project-name>

-- inicia o progeto
ng serve

-- cria um componente
ng g c <NomeDoComponente>

-- adiciona uma dependecia ao angular
ng add @angular/material

constructor -> chamado quando o componente é criado
ngOnInit -> chamado logo apos o componente ser criado e carregado
ngOnDestroy -> chamado quando um componente é destruído
ngAfterViewInit -> chamado após todas as referencias de variaveis estarem prontas

-- String interpolation - transforma um dado em string
{{ <var> }} 

-- property-binding - exibe o conteudo de uma variavel na tela
[color]="variavel"

-- envia dados para a classe
(input) = "inputName = $event.target.value"
(click) = "executarAlgo($event)"

Two Way DataBinding - a alteracao é feita em tela e refletida automaticamente na classe
<input [(ngModel)]="name1" name="qualquer1">

ngStyle
<p [ngStyle]="{ fontSize: myFontSize, color: myColor }">TEST</p>

ngClass
<p [ngClass]="myClass">TEST</p>

ngIf -> aqui o componente não existe na tela qando false
<mat-form-field *ngIf="showName">

ngFor -> percorre os elementos de um array
<p *ngFor="let name of names; let i=index"> {{i}} - {{name}}</p>

ngSwitch -> switch case normal
 <section [ngSwitch]="fieldname">
	<button *ngSwitchCase="'button'" mat-raised-button color=warn>Button</button>
	<mat-checkbox *ngSwitchCase="'checkbox'">Checkbox</mat-checkbox>
	<mat-progress-bar *ngSwitchCase="'progressbar'" color="warn" mode="indeterminate"></mat-progress-bar>
</section>

ngTemplate (uso com else) -> serve para incluir um conteúdo html

<h1 *ngIf="enable else mytemplate">Enabled</h1>
<!--#variável de referencia-->
<ng-template #mytemplate>
 ...
 
ngContainer -> parecido com ngTemplate serve para incluir conteudos dentro dele
<ul>
  <ng-container *ngFor="let user of users">
	<li *ngIf="user.role==='admin'">
	  {{user.login}}
	</li>
  </ng-container>
</ul>

<ng-content></ng-content> -> inclui conteudo dentro do componente filho

--- Passando parametros para componente filho
import { Input } from '@angular/core';
@Input() title: string;


<comp title="blablabla">

--- retornando uma ação para o componente pai
import { Output, EventEmitter } from '@angular/core';
@Output() plusOne = new EventEmitter<any>();
plusOneClick() {
  this.plusOne.emit();
}

<comp (plusOne)="metodoDoPai()">

---- Binding de componentes de tela 

// pega o componente pelo nome #stopwatch
@ViewChild("stopwatch", {static: true})
private myTimer: TimerComponent;

// pega o primeiro componente de tela do tipo encontrado
@ViewChild(TimerComponent, {static: false})
private myTimer: TimerComponent;

// pegando um component <p>
@ViewChild('myP', {static: false})
private myP: ElementRef;

// chamado apos todas as referencias de variaveis estarem prontas
ngAfterViewInit() {
  console.log(this.myP);
}


---- detectando mudanças
// indico a interface OnChanges para implementa-la
export class NameChangeComponent implements OnInit, OnChanges {

// implemento o metodo. Aqui é possível capturar as mudanças nas propriedades
ngOnChanges(changes: {[propKey: string]: SimpleChange}): void {
    console.log(changes);
    // verifico se existe a propriedade name q é o atributo que quero capturar a mudança
    if (changes.hasOwnProperty('name')) {
      this.nameBefore = changes['name'].previousValue;
    }
  }

-- capturando mudanças no @Input
  // seto um metodo no @Input(), no lugar de uma variavel
  @Input()
  // quando uso o set o name vira uma propriedade, essa é uma funçãodo TS
  set name(name: string) {
    this._name = 'Your name: ' + (name.toUpperCase().trim() || '<name empty>');
  }

  get name(): string {
    return this._name;
  }




---- OBSERVABLES (RXJS - cuida da reatividade no angular)
e um padrao de projeto que retorna eventos para tods os inscritos.

exemplo basico:
const myFirstObservable = new Observable(
      // indicar no Observer o tipo de dado que será gerado por esse Observable
      (observer: Observer<number> ) => {
        // next é o cara q vai gerar o dado, o retorno do meu observable
        observer.next(1);
        observer.next(2);
        observer.next(3);
        observer.next(4);
        observer.next(5);
        // qualquer coisa pode ser passada para o error
        observer.error('error');
        observer.complete();
      }
    );

    // subscribe será chamado quando o observable retornar algo
    // subscribe recebe tres métodos
    myFirstObservable.subscribe(
      // valores retornados pelo observable. n tem q ser do mesmo tipo de retorno o observable
      (n: number) => console.log(n),
      // retorna em caso de erro
      (error) => console.error(error),
      // esse ultimo método é chamado quando o observable termina de passar os dados
      () => console.log('completed')
    )
	
--- Hot observables
Tipo de observable onde todos os inscritos recebem o mesmo valor. Ou seja, existe apenas uma instancia do observable

-- formas de 'esquentar' um observable
this.myObservable = new Observable(
      (observer: Observer<number>) => {
        let i: number = 0;
        console.log('%c Observable Creates', 'background: #cccc; color: red;');
        console.log('%c Repare que assim que a aplicação inicia, ele se inscrebe no Observable, depois de 2 segundos no observable1 e apos 4 no 2 ', 'background: #cccc; color: red;')
        setInterval(()=> {
          i++;
          console.log('%c I gerado: ' + i, 'background: #cccc; color: blue;');
          (i=== 100) ? observer.complete() : observer.next(i);
        }, 1000);
      }
    );

-- com subjects
subjects sao observables e observer ao mesmo tempo. Na pratica um subject se conecta ao observables, conventra seus eventos e todos se inscrevem no subject recebendo os mesmos eventos;

Exemplo:
const subject = new Subject<number>();
// como subject tbm é um observer eu posso passar ele no subscribe para meu Observable
// dessa forma, teremos apenas um Observable gerando os dados e todos os inscritos nesse subscribe receberão os dados
this.myObservable.subscribe(subject);
subject.subscribe((_n) => {
this.n1 = _n;
this.s1 = 'ok';
});

---Publish
// diferente do subjects, o publish so inicia o observable quando ocorre o primeiro subscribe
// Funcao que consegue aplicar alguns filtros e transfomações nos dados retornados no observable
    const multcasted = this.myObservable.pipe(
      // vai publicar os dados como um subject, ou seja, permitirá q outros se inscrevam
      publish(),
      // conecta o publish ao observable, permitindo que outros se inscrevam nesse publish. A conexão so ocorre no primeiro subsribe
      refCount()
    );
	
// outra forma de fazer
// nesse exemplo estou criando apenas uma conexao com o observable
    const multcasted: ConnectableObservable<number> = this.myObservable.pipe(publish()) as ConnectableObservable<number>;
    // dessa forma eu posso forçar o momento da conexao 
    multcasted.connect();
	
 multcasted.subscribe((_n) => {
        this.n1 = _n;
        this.s1 = 'ok';
      });


---share
// o share funciona parecido com o subject, so vai iniciar após o primeiro subject
// a diferença do share é que após um completed, se ocorrer outro subscribe ele começa a gerar os dados novamente
const multcasted =  this.myObservable.pipe(share());
this.s1 = 'waiting for interval...';
 multcasted.subscribe((_n) => {
	this.n1 = _n;
	this.s1 = 'ok';
  });

-- SUBJECTS
4 tipos de subjects disponiveis
// começa a pegar os eventos a partir do subscribe"
private subject: Subject<DataModel>;
//pega todos os eventos gerados pelo observable
private replaySubject: ReplaySubject<DataModel>;
// pega apenas o ultimo evento
private asyncSubject: AsyncSubject<DataModel>;
// igual ao Subject, mas o primeiro evento é o dado passado no construtor, além disso, ele pega o ultimo evento gerado pelo observabe"></app-subjects-child>
private behaviorSubject: BehaviorSubject<DataModel>;

---FUNCOES RXJS

import { Component, OnInit } from '@angular/core';
import { Observable, Observer, from, of, interval, timer, Subscription, fromEvent } from 'rxjs';
import { Source } from 'webpack-sources';

@Component({
  selector: 'app-basic-creation',
  templateUrl: './basic-creation.component.html',
  styleUrls: ['./basic-creation.component.css']
})
export class BasicCreationComponent implements OnInit {

  // permite receber o resultado de um subscribe, ou de varios com o add. Além disso, permite se desenscrever de todos os subscriptions envolvidos
  subscription: Subscription = new Subscription();

  constructor() { }

  ngOnInit() {
  }

  observableCreate() {
  // observable simples
    // outra forma de criar um observable
    const hello = Observable.create((observer: Observer<string>) => {
      observer.next('hello');
      observer.next('from');
      observer.next('observable');
      observer.complete();
    });
    hello.subscribe(val => console.log(val));
  }

-- from serve para retornar um ou mais dados. Na pratica ele da um next para cada valor passado no array
  fromClick() {
    from([1, 2, 3, 4, 5, {x: 10, y:20}])
      .subscribe(val => console.log(val));
  }

// diferente do from retorna apenas um objeto, ou seja, tem apenas um next. no exemplo abaixo retorna um array
  ofClick() {
    of([1, 2, 3, 4, 5, {x: 10, y:20}])
      .subscribe(val => console.log(val));
  }

// define um intervalo que ser chamado, interval gera numeros de 0 ate n
  intervalClick() {
    const source = interval(1000);
    this.subscription.add(source.subscribe((v) => console.log(v)));
  }

 // igual ao interval, mas pode ser definido um delay inicial
  timerClick() {
    // se passar apenas um valor ele gera apenas uma vez
    const source = timer(1000);
    this.subscription.add(source.subscribe((v) => console.log(v)));

    // depois de 3 segundos ele gera de 1000 em 1000
    const source2 = timer(3000, 1000);
    this.subscription.add(source2.subscribe((v) => console.log(v)));
  }

  // event serve para capturar eventos de um componente de tela
  fromEventClick() {
    // document ja é uma variavel usado no angular e representa o documento inteiro
    // poderia passar tbm um ViewChild e pegar os eventos de um documento específico
    // 'click' é o evento que quero capturar
    const subscription = fromEvent(document, 'click')
      .subscribe((e)=> {
        console.log(e);
      })
    this.subscription.add(subscription);
  }

  unsubscribeClick() {
    // o unsubscribe se desinsreve de todos os subscriptions adicionados e mata o subscription
    this.subscription.unsubscribe();

    // inicio uma nova instancia para o caso de querer me inscrever novamente
    this.subscription = new Subscription();
  }
}



--- OPERADORES EXJS

---Map -> permite modificar o resultado
from([1,2,3,4,5,6,7])
    // no pipe posso encadear uma série de operadores e transformar os dados
    .pipe(
      map(i => i*2),
      map(i => 'Number:' + 1),
      // da um atraso no retorno da informacao
      delay(1000)
    )
      .subscribe((i) => console.log(i));

--Filter -> serve para filtrar os resultados
filterClick() {
    from([1,2,3,4,5,6,7])
    .pipe(
      // permite filtrar
      filter(i => i % 2 === 1)
    )
    .subscribe((i) => console.log(i));

    interval(1000)
      .pipe(
        filter(i => i % 2 === 0),
        map(i => 'Number:' + i),
      )
      .subscribe((i) => console.log(i))
  }
  
  --Tap -> a ideia do tap é executar alguma coisa e não modificar o valor. Por exemplo podemos dar um log no valor durante a geraçao
  interval(1000)
      .pipe(
        
        tap(i => console.warn('Before filter' + i)),
        filter(i => i % 2 === 0),
        // se for filtrado, o after nao é impresso
        tap(i => console.warn('After filter' + i)),
        map(i => 'Number:' + i),
      )
      .subscribe((i) => console.log(i))
  
-- Operadores Take, First e Last
 Take (deixa passar n elementos e depois executa o complete e unsubscribe) 
 First (deixa passar o primeiro elementos e depois executa o complete e unsubscribe) 
 Last (deixa passar o ultimo elemento, mas nao encerra o observable) 

const observable = new Observable((observer) => {
      let i; 
      for(i=0; i<20; i++) {
        setTimeout(() => {
          observer.next(Math.floor(Math.random()*100))
        }, i*100);
      }
      setTimeout(() => observer.complete(), i*100);
    })
    const s: Subscription = observable
      .pipe(
        tap(i => console.log(i)),
        // encessa o sunscription depois de N passadas, ele executa um complete. Não é necessário tbm dar unsubscribe
        take(10),
        // igual ao take, porem pega o primeiro
        // first()
        // igual aos anteriores, porem pega o ultimo. Mas o last nao encerra o Observable.
        // last()
      )
      .subscribe(
        v => console.log('Output ' + v),
        (error) => console.error(error),
        () => console.log('Complete'));
  }
  
  
 ---- debounceTime -> Exige que exista um tempo de ociocidade em eventos para disparar a pilha de eventos
 
 debounceTimeClick() {
    fromEvent(document, 'click')
      .pipe(
        tap((e) => console.log('Click')),
        // durante esse intervalo, eu posso gerar n eventos, mas apenas o ultimo será repassado. Nesse exemplo teremos no maximo 1 click por segundo;
        // uma boa utilizacao é para pesquisa no evento de keypress
        debounceTime(1000)
      )
      .subscribe(
        (e: MouseEvent) => {
          console.log("Click with debounce time ", e);
          this.louchRipple();
        }
      )
  }
  
---Async -> usado na interface para se trabalhar com observables. O async faz um subscribe no observable e captura o resultado

ngOnInit() {
this.options$ = Observable.create(
  (observer) => {
	for(let i=0; i<10; i++) {
	  observer.next(`This is my ${i}th option.`);
	}
	observer.complete();
  }
)
.pipe(
  map(s => s+'!'),
  toArray(),
  delay(2000)
);

<mat-selection-list>
	<!-- O proprio async da subscribe do observable-->
	<!-- async é muito usado para trabalhar com observables, pois ele transforma o observable no dado por ele gerado, nesse caso um array -->
	<mat-list-option *ngFor="let o of options$ | async">{{o}}</mat-list-option>
</mat-selection-list>

<!-- esse as, cria uma variavel local chamada user, com isso, ele faz um unico subscribe no observable-->
<div *ngIf="user$ | async as user; else loadinguser2">
  <!--? verifica se é nulo-->
  <p>Name: {{user?.name}}</p>
  <p>Login: {{user?.login}}</p>
</div>
<ng-template #loadinguser2>
  <mat-progress-bar></mat-progress-bar>
</ng-template>


--- Tratamento de erro dentro de um observable, permitindo capturar o erro no momento da geraçao dos dados.
--- O retry e retryWhen permitem reexecutar a operaçao em caso de erro
--- timeout -> espera uma quantidade de tempo para que ocorra o complete, se nao ocorrer retorna um TimeoutError
obj
  .pipe(
	map(i=>i*10),
	tap(i=>console.log('Before error handing' + i)),
	// tempo de espera para completar o observable, se nao completar nesse tempo ele retorna um TimeoutError
	timeout(1000)
	// captura um erro durante a geração dos dados
	catchError(error => {
	  console.error('Inside catch Error' + error)
	  // of cria um observable para ser retornado
	  // posso simplesmente retornar um valor em caso de erro
	  // return of(0);
	  // ou posso disparar uma excessão
	  return throwError('throwError: Error')
	}),
	// tenta n vezes em caso de erro
	// retry(2),
	// recebe um observable dizendo quando ele deve tentar, no exemlo abaixo, tenta depois de 2 segundos
	retryWhen(i => timer(2000))
  )

--- Unsubscribe mais elegante
private unsubscribeAll$: Subject<any> = new Subject<any>();
subscribe() {
	// vai gerar 100 subscribes
	const subscription1 = interval(100)
	  .pipe(takeUntil(this.unsubscribeAll$))
	  .subscribe((i)=>{
		console.log(i);
	  })

	// vai gerar um subscribe a cada movimento do mouse
	const subscription2 = fromEvent(document, 'mousemove')
	  .pipe(takeUntil(this.unsubscribeAll$))
	  .subscribe((e) => console.log(e));

	this.subscriptions.push(subscription1);
	this.subscriptions.push(subscription2);
}
unsubscribe() {
	this.unsubscribeAll$.next()
	if (this.intervalSubscription != null)
		this.intervalSubscription.unsubscribe();
}

ngOnDestroy() {
	// o ideal é sempre se desinscrever de todos os observables
	this.unsubscribe();
}


--- mergeAll, mergeMap, swithAll, swithMap 
mergeAll -> se inscreve automaticamente no observable e recupera apenas o resultado
let keyup$ = fromEvent(this.el.nativeElement, 'keyup');
let fetch$ = keyup$.pipe(map((e) => this.filterPeople(this.serachInput)));
this.people$ = fetch$.pipe(mergeAll());

mergeMap -> faz o mesmo que o map e o mergeAll juntos
this.people$ = keyup$.pipe(mergeMap((e) => this.filterPeople(this.serachInput)));

switchAll -> identico ao mergeAll, mas o switch cancela as requisicoes anteriores ainda nao retornadas, com isso existe um ganho de performance
switchMap -> identico ao switchMap, mas o switch cancela as requisicoes anteriores ainda nao retornadas, com isso existe um ganho de performance
this.people$ = keyup$
  .pipe(
	// nao vai mandar nada até q a digitação fique ociosa em 700ms
	debounceTime(700),
	switchMap(() => this.filterPeople(this.serachInput)));
	
	
#FORMS
-- Importar o FormsModule, em app.module para usar forms


- Template Driven Forms
<!--
  Formulário controlado pelo Angular (#formClient="ngForm")
  para que funcione é preciso ter o name a cada um dos campos
  (ngSubmit)="onSubmit()" -> faz o link com o metódo que fará o submit do form
-->
<form fxLayout="column" fxLayoutAlign="start stretch"
  #formClient="ngForm" (ngSubmit)="onSubmit()">

<input matInput type="text" class="form-control" value="" placeholder="First Name" 
	[(ngModel)]="client.firstName" name="firstName">

<button mat-button color="primary" type="submit" >
	<mat-icon>done</mat-icon>Submit
</button>


# VALIDACAO
----form-native-validation
<form (ngSubmit)="onSubmit()" fxLayout="column" fxLayoutAlign="start stretch"  #formClient="ngForm">
	<mat-form-field fxFlex="45" >
	  <!--
		#firstNameField="ngModel" -> pego o ngModel
		invalid -> indica q o campo está inválido
		touched -> indica q o campo foi clicado e saiu
		dirty -> alguma tecla foi digitada
	  -->
	  <input matInput type="text" autocomplete="off" [(ngModel)]="firstName" name="firstName"
		class="form-control" value="" placeholder="First Name" #firstNameField="ngModel"
		required minlength="3">
		<mat-hint *ngIf="firstNameField.invalid && (firstNameField.touched || firstNameField.dirty)" class="field-erro">
		<p>Enter a valid name</p>
	  </mat-hint>
	</mat-form-field>
  	<!--  !formClient.valid -> desabilito o botão se o form nao for valido-->
  <button mat-button color="primary" type="submit" 
	[disabled]="!formClient.valid">
	<mat-icon>done</mat-icon>Submit
  </button>
</form>

-- form-validation
<form (ngSubmit)="onSubmit()" fxLayout="column" fxLayoutAlign="start stretch" #formClient="ngForm">
	<mat-form-field fxFlex="45" >  
	  <input matInput type="text" class="form-control" value="" placeholder="First Name"
		name="firstName"  [(ngModel)]="client.firstName"
		required minlength="4" #firstName="ngModel">
	  <!-- verifica se tem erro de required ou minlength-->
	  <mat-error *ngIf="firstName.errors?.required">
		Please enter the first name
	  </mat-error>
	  <mat-error *ngIf="firstName.errors?.minlength">
		First name must be 4 or more characters long
	  </mat-error>
	</mat-form-field>
    <button mat-button color="primary" type="submit" [disabled]="!formClient.valid" >
		<mat-icon>done</mat-icon>Submit
    </button>
</form>

#REACTIVE FORMS
- é necessário importar o ReactiveFormsModule no app.module

--- form control
é uma meira de validar e controlar os condeúdos dos campos individualmente
ex.:
<input matInput type="text" 
	class="form-control" value="" placeholder="First Name" 
	[formControl]="firstName">

// é preciso criar um atributo q será lincado com a tela
firstName: FormControl = new FormControl('');

ngOnInit() {
  // o firstName é um observable, sendo assim é possivel capturar algumas informacoes sobre o input
  this.firstName.valueChanges
    .subscribe((newName) => console.log(newName));
}

setFirstName() {
 // tbm é possivel acessar e modificar seu conteudo
  this.firstName.setValue('Adam');
  console.log(this.firstName.value);
}


--- form group
é uma forma de agrupar forms control e forms group
ex: 
// propriedade
clientForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
    name: new FormGroup({
      firstName: new FormControl(''),
      lastName: new FormControl(''),
    })
  });

// forma de acessar
submit() {
    console.log(this.clientForm.value);
    console.log(`
      First Name: ${this.clientForm.value.firstName},
      Last Name: ${this.clientForm.value.lastName}
      First Name Interno: ${this.clientForm.value.name.lastName}
    `);

 <!--[formGroup] -> indico o grupo-->
  <form fxLayout="row wrap" fxLayoutAlign="space-evenly begin" 
	[formGroup]="clientForm" (ngSubmit)="submit()">
	<mat-form-field fxFlex="45" >  
	  <!-- formControlName="firstName" - indico o atricuto interno do grupo-->
	  <input matInput type="text" value="" placeholder="First Name"
		formControlName="firstName">
	</mat-form-field> 
	<!-- SUBGRUPO -->
	<div fxLayout="column" fxLayoutAlign="space-around stretch"
	  formGroupName="name">
	  <mat-form-field fxFlex="45" >  
		<input matInput type="text" value="" placeholder="First Name"
		  formControlName="firstName">
	  </mat-form-field> 
	</div>
</form>


---- form builder
funciona de forma parecida com o formgroup, mas tem alguns facilitadores na hora de gerar as propriedades
ex.:
constructor(
	private fb: FormBuilder
) { }

// Primeiro campo é o valor e o sengundo a validação 
  // firstName: ['', validacao],
  clientForm = this.fb.group({
    firstName: [''],
    lastName: [''],
    address: this.fb.group({
      street: [''],
      city: [''],
      state: [''],
    })
  });
  

-- form array
Permite criar arrays de controls ou groups
ex.: 
constructor(
	private fb: FormBuilder
) { }
clientForm = this.fb.group({
    firstName: [''],
    lastName: [''],
	// se eu ja quiser iniciar com dois telefones this.fb.array([''], [''])
    phones: this.fb.array(['']),
  });
// coloco pra fora os phones ja convertendo em FormArray
// aqui ele cria uma referencia de memória
phones = this.clientForm.get('phones') as FormArray;

// adiciono dinamicamente telefones
addPhone() {
    this.phones.push(this.fb.control(''));
  }
  
  
<!-- preciso indicar o formArrayName -->
<div fxFlex="100"  fxLayout="row wrap" fxLayoutAlign="start start" fxLayoutGap="20px"
  formArrayName="phones">
  <!-- phones.controls -> retorna um array de controls -->
  <mat-form-field fxFlex="30" *ngFor="let c of phones.controls; let i=index;">  
	<!-- indico o control pelo indice -->
	<input matInput type="text" placeholder="Telephone" 
	  [formControlName]="i">
  </mat-form-field>

  <button mat-button type="button" color="primary" (click)="addPhone()">
	<mat-icon>add</mat-icon>
  </button>
</div>

-- tbm é possivel fazer um array de grupos
constructor(
	private fb: FormBuilder
) { }
  
clientForm = this.fb.group({
    firstName: [''],
    lastName: [''],
	children: this.fb.array([]),
})

// coloco pra fora os phones ja convertendo em FormArray
// aqui ele cria uma referencia de memória
children = this.clientForm.get('children') as FormArray;

addChild() {
	// aqui diciono um grupo
	this.children.push(
	  this.fb.group({
		name: this.fb.control(''),
		age: this.fb.control(''),
	  })
	);
}

<!-- formArrayName="children" -> indico o nome do array -->
<div fxFlex="100"  fxLayout="column" fxLayoutAlign="space-between start"
  formArrayName="children">
  <!-- 
	</ng-container> nao parce, so indica q tera algo
	percorro o array de grupos 'children.controls'
  -->
  <ng-container *ngFor="let c of children.controls; let i=index;">
	<!-- no formGroupName passo o index do group -->
	<div fxFlex="100"  fxLayout="row" fxLayoutAlign="space-between begin"
	  [formGroupName]="i">
	  <mat-form-field fxFlex="75" >  
		<input matInput type="text" placeholder="Name" 
		  formControlName="name">
	  </mat-form-field> 
	  <mat-form-field fxFlex="20">
		<input matInput type="text" placeholder="Age" 
		  formControlName="age">
	  </mat-form-field>
	</div>
  </ng-container>
</div>

